import json
import os
from typing import Dict, Any
import urllib.request
import urllib.parse
from io import BytesIO
import base64

TELEGRAM_TOKEN = "8310137961:AAFYWzx442w3bx3Y7VPvuMDDbyl0W576qbQ"
TELEGRAM_API = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Telegram –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π PPTX
    Args: event - webhook –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
          context - –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    Returns: HTTP response –¥–ª—è Telegram
    '''
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method == 'POST':
        try:
            body_data = json.loads(event.get('body', '{}'))
            
            if 'message' in body_data:
                message = body_data['message']
                chat_id = message['chat']['id']
                text = message.get('text', '')
                
                if text.startswith('/start'):
                    send_start_message(chat_id)
                elif text.startswith('/help'):
                    send_help_message(chat_id)
                elif text.startswith('/examples'):
                    send_examples_message(chat_id)
                else:
                    create_and_send_presentation(chat_id, text)
        except Exception as e:
            pass
        
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'ok': True}),
            'isBase64Encoded': False
        }
    
    return {
        'statusCode': 200,
        'headers': {'Content-Type': 'text/plain'},
        'body': 'Presentation Bot is running!',
        'isBase64Encoded': False
    }

def send_message(chat_id: int, text: str, parse_mode: str = 'HTML') -> None:
    params = {
        'chat_id': str(chat_id),
        'text': text,
        'parse_mode': parse_mode
    }
    
    try:
        url = f"{TELEGRAM_API}/sendMessage?" + urllib.parse.urlencode(params)
        req = urllib.request.Request(url)
        
        with urllib.request.urlopen(req) as response:
            response.read()
    except Exception as e:
        pass

def send_start_message(chat_id: int) -> None:
    text = """üìä <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Presentation AI Bot!</b>

–Ø —Å–æ–∑–¥–∞—é –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PPTX –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª!

<b>üéØ –ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –ª—é–±–æ–π —Ç–µ–º–µ
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–∞–π–¥—ã
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ—Ç–æ–≤—ã–π PPTX —Ñ–∞–π–ª

<b>üöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ —Ç–µ–º—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —è —Å–æ–∑–¥–∞–º –µ—ë!

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
"–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ 5 —Å–ª–∞–π–¥–æ–≤"
"–ü–∏—Ç—á –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –µ–¥—ã, 7 —Å–ª–∞–π–¥–æ–≤"
"–û–±—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, 10 —Å–ª–∞–π–¥–æ–≤"

<b>üìã –ö–æ–º–∞–Ω–¥—ã:</b>
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
/examples - –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π

–ù–∞–ø–∏—à–∏ —Ç–µ–º—É —Å–≤–æ–µ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª! ‚ú®"""
    
    send_message(chat_id, text)

def send_help_message(chat_id: int) -> None:
    text = """‚ùì <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é</b>

<b>üìù –û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é:</b>

<b>1Ô∏è‚É£ –¢–µ–º–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>
–û —á—ë–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è?
‚Ä¢ "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥"
‚Ä¢ "–ó–∞—â–∏—Ç–∞ –¥–∏–ø–ª–æ–º–∞ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ"
‚Ä¢ "–ü–∏—Ç—á –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤"

<b>2Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤</b>
–û—Ç 3 –¥–æ 15 —Å–ª–∞–π–¥–æ–≤
‚Ä¢ "5 —Å–ª–∞–π–¥–æ–≤"
‚Ä¢ "10 —Å–ª–∞–π–¥–æ–≤"

<b>3Ô∏è‚É£ –°—Ç–∏–ª—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>
‚Ä¢ "–î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å"
‚Ä¢ "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω"
‚Ä¢ "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π"

<b>‚úÖ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>

üíº "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, 7 —Å–ª–∞–π–¥–æ–≤, –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å"

üìö "–£—Ä–æ–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, 10 —Å–ª–∞–π–¥–æ–≤, –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤"

üöÄ "–ü–∏—Ç—á —Å—Ç–∞—Ä—Ç–∞–ø–∞ –ø–æ AI, 5 —Å–ª–∞–π–¥–æ–≤, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω"

<b>üìä –ß—Ç–æ –±—É–¥–µ—Ç –≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:</b>
‚Ä¢ –¢–∏—Ç—É–ª—å–Ω—ã–π —Å–ª–∞–π–¥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
‚Ä¢ –í–≤–µ–¥–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ–º—ã
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–∞–π–¥—ã –ø–æ —Ç–µ–º–µ
‚Ä¢ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –≤—ã–≤–æ–¥–∞–º–∏

<b>‚è± –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</b>
10-15 —Å–µ–∫—É–Ω–¥

–û–ø–∏—à–∏ —Å–≤–æ—é —Ç–µ–º—É –∏ –ø–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π PPTX —Ñ–∞–π–ª! üé¨"""
    
    send_message(chat_id, text)

def send_examples_message(chat_id: int) -> None:
    text = """üìä <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π</b>

<b>–î–ª—è –±–∏–∑–Ω–µ—Å–∞:</b>
üíº "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤, 8 —Å–ª–∞–π–¥–æ–≤"
üíº "–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞, 10 —Å–ª–∞–π–¥–æ–≤"
üíº "–ü–∏—Ç—á –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤, 5 —Å–ª–∞–π–¥–æ–≤"

<b>–î–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</b>
üìö "–£—Ä–æ–∫ –ø–æ —Ñ–∏–∑–∏–∫–µ: –∑–∞–∫–æ–Ω—ã –ù—å—é—Ç–æ–Ω–∞, 7 —Å–ª–∞–π–¥–æ–≤"
üìö "–î–∏–ø–ª–æ–º–Ω–∞—è –∑–∞—â–∏—Ç–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, 12 —Å–ª–∞–π–¥–æ–≤"
üìö "–ü—Ä–æ–µ–∫—Ç –¥–ª—è —à–∫–æ–ª—ã –ø—Ä–æ —ç–∫–æ–ª–æ–≥–∏—é, 6 —Å–ª–∞–π–¥–æ–≤"

<b>–î–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞:</b>
üìà "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, 8 —Å–ª–∞–π–¥–æ–≤"
üìà "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –≥–æ–¥, 10 —Å–ª–∞–π–¥–æ–≤"
üìà "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, 6 —Å–ª–∞–π–¥–æ–≤"

<b>–î–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤:</b>
üöÄ "–ü–∏—Ç—á-–¥–µ–∫ –¥–ª—è –∞–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä–∞, 10 —Å–ª–∞–π–¥–æ–≤"
üöÄ "–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, 12 —Å–ª–∞–π–¥–æ–≤"
üöÄ "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è MVP –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º, 7 —Å–ª–∞–π–¥–æ–≤"

<b>–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ:</b>
üé® "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞, 8 —Å–ª–∞–π–¥–æ–≤"
üé® "–ò–¥–µ—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, 5 —Å–ª–∞–π–¥–æ–≤"
üé® "–ü–ª–∞–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, 6 —Å–ª–∞–π–¥–æ–≤"

–í—ã–±–µ—Ä–∏ –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —Ç–µ–º—É! üí°"""
    
    send_message(chat_id, text)

def create_and_send_presentation(chat_id: int, user_text: str) -> None:
    send_message(chat_id, "‚è≥ –°–æ–∑–¥–∞—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é... –≠—Ç–æ –∑–∞–π–º—ë—Ç 10-15 —Å–µ–∫—É–Ω–¥")
    
    try:
        from pptx import Presentation
        from pptx.util import Inches, Pt
        from pptx.enum.text import PP_ALIGN
        from pptx.dml.color import RGBColor
        
        prs = Presentation()
        prs.slide_width = Inches(10)
        prs.slide_height = Inches(7.5)
        
        topic = extract_topic(user_text)
        num_slides = extract_slide_count(user_text)
        
        add_title_slide(prs, topic)
        add_content_slides(prs, topic, num_slides - 2)
        add_conclusion_slide(prs, topic)
        
        pptx_io = BytesIO()
        prs.save(pptx_io)
        pptx_io.seek(0)
        
        send_document(chat_id, pptx_io, f"{topic[:30]}.pptx")
        send_message(chat_id, f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è '{topic}' —Å–æ–∑–¥–∞–Ω–∞!\n–°–ª–∞–π–¥–æ–≤: {num_slides}\n\n–ú–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PowerPoint, Google Slides –∏–ª–∏ Keynote üìä")
        
    except ImportError:
        send_message(chat_id, """üìä <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏</b>

–¢–≤–æ—è —Ç–µ–º–∞: "{}"

<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:</b>

<b>–°–ª–∞–π–¥ 1: –¢–∏—Ç—É–ª—å–Ω—ã–π</b>
üìå {}

<b>–°–ª–∞–π–¥ 2: –í–≤–µ–¥–µ–Ω–∏–µ</b>
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º—ã
‚Ä¢ –¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏
‚Ä¢ –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä

<b>–°–ª–∞–π–¥—ã 3-{}: –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å</b>
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã –ø–æ —Ç–µ–º–µ
‚Ä¢ –§–∞–∫—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑

<b>–°–ª–∞–π–¥ {}: –ó–∞–∫–ª—é—á–µ–Ω–∏–µ</b>
‚Ä¢ –í—ã–≤–æ–¥—ã
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã

<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é:</b>
‚úì –ò—Å–ø–æ–ª—å–∑—É–π –µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å
‚úì –ö—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç (24+ pt)
‚úì –ú–∏–Ω–∏–º—É–º —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–ª–∞–π–¥–µ
‚úì –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚úì –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö

<b>üõ† –°–æ–∑–¥–∞–π –≤:</b>
‚Ä¢ Google Slides (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ–Ω–ª–∞–π–Ω)
‚Ä¢ PowerPoint
‚Ä¢ Canva (–≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã)

–£–¥–∞—á–∏ —Å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π! üöÄ""".format(
            user_text,
            extract_topic(user_text),
            extract_slide_count(user_text) - 1,
            extract_slide_count(user_text)
        ))

def extract_topic(text: str) -> str:
    text_clean = text.lower()
    for word in ['–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –æ', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–ø—Ä–æ ', '–æ ', '–Ω–∞ —Ç–µ–º—É']:
        text_clean = text_clean.replace(word, '')
    
    for word in [' —Å–ª–∞–π–¥', ' –Ω–∞ ', '–¥–µ–ª–æ–≤–æ–π', '–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π', '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç']:
        if word in text_clean:
            text_clean = text_clean.split(word)[0]
    
    return text_clean.strip().capitalize()[:50] or "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"

def extract_slide_count(text: str) -> int:
    import re
    numbers = re.findall(r'\d+', text)
    if numbers:
        num = int(numbers[0])
        return max(3, min(num, 15))
    return 5

def add_title_slide(prs, topic):
    from pptx.util import Inches, Pt
    from pptx.enum.text import PP_ALIGN
    from pptx.dml.color import RGBColor
    
    slide = prs.slides.add_slide(prs.slide_layouts[6])
    
    left = Inches(1)
    top = Inches(3)
    width = Inches(8)
    height = Inches(1.5)
    
    title_box = slide.shapes.add_textbox(left, top, width, height)
    title_frame = title_box.text_frame
    title_frame.text = topic
    
    p = title_frame.paragraphs[0]
    p.font.size = Pt(54)
    p.font.bold = True
    p.font.color.rgb = RGBColor(68, 84, 106)
    p.alignment = PP_ALIGN.CENTER

def add_content_slides(prs, topic, count):
    from pptx.util import Inches, Pt
    from pptx.dml.color import RGBColor
    
    content_points = generate_content_points(topic, count)
    
    for i, point in enumerate(content_points):
        slide = prs.slides.add_slide(prs.slide_layouts[6])
        
        title_box = slide.shapes.add_textbox(Inches(0.5), Inches(0.5), Inches(9), Inches(1))
        title_frame = title_box.text_frame
        title_frame.text = f"{point['title']}"
        title_frame.paragraphs[0].font.size = Pt(36)
        title_frame.paragraphs[0].font.bold = True
        title_frame.paragraphs[0].font.color.rgb = RGBColor(68, 84, 106)
        
        content_box = slide.shapes.add_textbox(Inches(0.5), Inches(2), Inches(9), Inches(4.5))
        content_frame = content_box.text_frame
        
        for bullet in point['bullets']:
            p = content_frame.add_paragraph()
            p.text = bullet
            p.level = 0
            p.font.size = Pt(24)
            p.font.color.rgb = RGBColor(89, 89, 89)

def add_conclusion_slide(prs, topic):
    from pptx.util import Inches, Pt
    from pptx.dml.color import RGBColor
    
    slide = prs.slides.add_slide(prs.slide_layouts[6])
    
    title_box = slide.shapes.add_textbox(Inches(0.5), Inches(0.5), Inches(9), Inches(1))
    title_frame = title_box.text_frame
    title_frame.text = "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ"
    title_frame.paragraphs[0].font.size = Pt(36)
    title_frame.paragraphs[0].font.bold = True
    title_frame.paragraphs[0].font.color.rgb = RGBColor(68, 84, 106)
    
    content_box = slide.shapes.add_textbox(Inches(0.5), Inches(2), Inches(9), Inches(4.5))
    content_frame = content_box.text_frame
    
    conclusions = [
        f"–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–µ–º—ã '{topic}'",
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –ø–æ–¥—Ö–æ–¥—ã",
        "–ò–∑—É—á–∏–ª–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!"
    ]
    
    for conclusion in conclusions:
        p = content_frame.add_paragraph()
        p.text = conclusion
        p.font.size = Pt(24)
        p.font.color.rgb = RGBColor(89, 89, 89)

def generate_content_points(topic, count):
    points = []
    base_sections = [
        {"title": "–í–≤–µ–¥–µ–Ω–∏–µ", "bullets": [
            f"–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º—ã '{topic}'",
            "–¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏",
            "–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"
        ]},
        {"title": "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è", "bullets": [
            "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ —Ç–µ—Ä–º–∏–Ω—ã",
            "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã",
            "–ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏"
        ]},
        {"title": "–ê–Ω–∞–ª–∏–∑", "bullets": [
            "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–∞–Ω–Ω—ã–µ",
            "–¢—Ä–µ–Ω–¥—ã –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏"
        ]},
        {"title": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ", "bullets": [
            "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            "–ö–µ–π—Å—ã –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            "–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏"
        ]},
        {"title": "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞", "bullets": [
            "–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≥–æ–¥—ã",
            "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
            "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞"
        ]},
        {"title": "–í—ã–∑–æ–≤—ã –∏ —Ä–µ—à–µ–Ω–∏—è", "bullets": [
            "–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏",
            "–°–ø–æ—Å–æ–±—ã –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è"
        ]},
        {"title": "–í—ã–≤–æ–¥—ã", "bullets": [
            "–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            "–î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏"
        ]}
    ]
    
    for i in range(min(count, len(base_sections))):
        points.append(base_sections[i])
    
    return points

def send_document(chat_id: int, file_data: BytesIO, filename: str) -> None:
    boundary = '----WebKitFormBoundary7MA4YWxkTrZu0gW'
    
    body = (
        f'--{boundary}\r\n'
        f'Content-Disposition: form-data; name="chat_id"\r\n\r\n'
        f'{chat_id}\r\n'
        f'--{boundary}\r\n'
        f'Content-Disposition: form-data; name="document"; filename="{filename}"\r\n'
        f'Content-Type: application/vnd.openxmlformats-officedocument.presentationml.presentation\r\n\r\n'
    ).encode('utf-8')
    
    body += file_data.read()
    body += f'\r\n--{boundary}--\r\n'.encode('utf-8')
    
    try:
        req = urllib.request.Request(
            f"{TELEGRAM_API}/sendDocument",
            data=body,
            headers={'Content-Type': f'multipart/form-data; boundary={boundary}'}
        )
        
        with urllib.request.urlopen(req) as response:
            response.read()
    except Exception as e:
        pass
